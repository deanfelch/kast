<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Kast Live Recorder</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css" />
<link rel="stylesheet" href="/css/frontend.css" />
</head>
<body class="bg-dark text-light">
  <div class="login-box text-center">
    <h1>🎙️ Kast Live</h1>
    <p id="status">Ready to record</p>
    <button class="btn btn-success" id="startBtn">Start Recording</button>
    <button class="btn btn-danger" id="stopBtn" disabled>Stop Recording</button>
  </div>

  <script>
    let mediaRecorder;
    let ws;
    let isRecording = false;

    document.getElementById("startBtn").onclick = async () => {
      const status = document.getElementById("status");
      const startBtn = document.getElementById("startBtn");
      const stopBtn = document.getElementById("stopBtn");

      // Disable buttons while initializing
      startBtn.disabled = true;
      stopBtn.disabled = true;
      status.textContent = "Initializing...";

      try {
        // 1. Get audio stream
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

        // 2. Create MediaRecorder
        mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });

        // 3. Setup WebSocket
        ws = new WebSocket(`wss://${window.location.host}/ws-record`);

        ws.onopen = () => {
          status.textContent = "Recording and streaming...";
          mediaRecorder.start(1000); // Collect 1s chunks
          isRecording = true;
          stopBtn.disabled = false;
        };

        // 4. Stream data chunks to server
        mediaRecorder.ondataavailable = e => {
          if (e.data.size > 0 && ws && ws.readyState === WebSocket.OPEN) {
            ws.send(e.data);
          }
        };

        // 5. When recording stops, update UI
        mediaRecorder.onstop = () => {
          // Avoid duplicate status messages
          if (status.textContent !== "✅ Uploaded to IPFS") {
            status.textContent = "Upload complete. Processing...";
          }
          isRecording = false;
        };

        // 5.1 Error handling for MediaRecorder
        mediaRecorder.onerror = (e) => {
          console.error("MediaRecorder error:", e);
          status.textContent = "❌ Recording error.";
          if (ws && ws.readyState === WebSocket.OPEN) {
            ws.close();
          }
        };

        // 6. Handle final IPFS response from server
        ws.onmessage = (event) => {
          const data = JSON.parse(event.data);
          if (data.status === "complete" && data.cid) {
            status.innerHTML = `
              ✅ Uploaded to IPFS:<br>
              <a href="${data.url}" target="_blank">${data.cid}</a>
            `;
            ws.close(); // Server is done, safe to close
          }
        };

        // 7. Catch WebSocket errors
        ws.onerror = (e) => {
          console.error("WebSocket error:", e);
          status.textContent = "❌ WebSocket error";
          stopBtn.disabled = true;
        };

      } catch (err) {
        console.error("Recording setup failed:", err);
        status.textContent = "❌ Microphone access denied or setup failed.";
        startBtn.disabled = false;
      }
    };


    document.getElementById("stopBtn").onclick = () => {
      const stopBtn = document.getElementById("stopBtn");
      const status = document.getElementById("status");

      stopBtn.disabled = true;

      // 8. Flush final chunk and give time to send before signaling done
      mediaRecorder.requestData(); // forces one last ondataavailable
      setTimeout(() => {
        mediaRecorder.stop();
        if (ws && ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ done: true }));
        }

        status.textContent = "Upload complete. Processing...";
      }, 300); // 300ms ensures flush completes
    };
  </script>
</body>
</html>
